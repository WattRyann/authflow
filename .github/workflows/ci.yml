name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x] # 添加 22.x，支持最新版本测试

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        # 通过 setup-node 启用 Corepack 和指定 Yarn 版本
        always-auth: false
        registry-url: 'https://registry.yarnpkg.com'

    - name: Enable Corepack and Set Yarn Version
      run: |
        corepack enable
        corepack prepare yarn@4.6.0 --activate
        yarn --version # 验证 Yarn 版本，确保为 4.6.0

    - name: Get Yarn Cache Directory
      id: yarn-cache-dir
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    - name: Cache Yarn Dependencies
      uses: actions/cache@v4
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ matrix.node-version }}-

    - name: Install Dependencies
      run: yarn install --frozen-lockfile

    - name: Setup Test Environment
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test

    - name: Run Linter
      run: yarn lint

    - name: Run Tests
      run: yarn test
      env:
        CI: true

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage
        fail_ci_if_error: false

    - name: Build Project
      run: yarn build
      env:
        CI: true

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'yarn'

    - name: Enable Corepack and Set Yarn Version
      run: |
        corepack enable
        corepack prepare yarn@4.6.0 --activate
        yarn --version # 验证 Yarn 版本

    - name: Install Dependencies
      run: yarn install --frozen-lockfile

    - name: Setup Production Environment
      run: |
        cp .env.example .env.production
        echo "NODE_ENV=production" >> .env.production
        echo "BASE_URL=${{ secrets.PROD_BASE_URL }}" >> .env.production
        echo "ALLOWED_ORIGINS=${{ secrets.PROD_ALLOWED_ORIGINS }}" >> .env.production

    - name: Install Vercel CLI
      run: yarn global add vercel

    - name: Deploy to Vercel
      run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}