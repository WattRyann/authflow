name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x] # 测试多个 Node.js 版本
      fail-fast: true # 若某个版本失败，立即停止其他版本测试，节省资源

    steps:
    - uses: actions/checkout@v4

    # 必须在 setup-node 之后立即启用 Corepack
    - name: 强制启用 Corepack
      run: |
        sudo corepack enable --install
        corepack prepare yarn@4.6.0 --activate
        echo "YARN_VERSION=$(yarn --version)" >> $GITHUB_OUTPUT

    - name: 设置 Node.js ${{ matrix.node-version }} 和 Yarn 4.6.0
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: yarn.lock

    # 删除重复的 Corepack 步骤
    - name: 启用 Corepack 并设置 Yarn 4.6.0
      run: |
        corepack enable
        corepack prepare yarn@4.6.0 --activate
        yarn --version  # 验证版本，应输出 4.6.0

    - name: 安装依赖
      run: yarn install --frozen-lockfile

    - name: 配置测试环境
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test

    - name: 运行 Linter
      run: yarn lint

    - name: 运行测试
      run: yarn test
      env:
        CI: true

    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v4 # 修正为正确的 Codecov 动作
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage
        fail_ci_if_error: false

    - name: 构建项目
      run: yarn build
      env:
        CI: true

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: 强制启用 Corepack
      run: |
        corepack enable
        corepack prepare yarn@4.6.0 --activate
        echo "YARN_VERSION=$(yarn --version)" >> $GITHUB_OUTPUT

    - name: 设置 Node.js 22.x 和 Yarn 4.6.0
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'yarn'
        cache-dependency-path: yarn.lock
    
    # 删除重复的 Corepack 步骤
    - name: 启用 Corepack 并设置 Yarn 4.6.0
      run: |
        corepack enable
        corepack prepare yarn@4.6.0 --activate
        yarn --version  # 验证版本
    
    - name: 安装依赖
      run: yarn install --frozen-lockfile

    - name: 配置生产环境
      run: |
        cp .env.example .env.production
        echo "NODE_ENV=production" >> .env.production
        echo "BASE_URL=${{ secrets.PROD_BASE_URL }}" >> .env.production
        echo "ALLOWED_ORIGINS=${{ secrets.PROD_ALLOWED_ORIGINS }}" >> .env.production

    - name: 安装 Vercel CLI
      run: yarn global add vercel

    - name: 部署到 Vercel
      run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}